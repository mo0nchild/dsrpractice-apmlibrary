@page "/catalog"
@using APMLibrary.Bll.Requests.BookRequests;
@using APMLibrary.Web.ViewComponents;
@using Microsoft.Extensions.Options;

@model APMLibrary.Web.Pages.LibraryPages.LibraryCatalogModel
@inject IOptions<APMLibrary.Web.Configurations.ListCatalogOptions> PageOptions;
@{
    this.ViewData["Title"] = "Библиотека";
}
@{
    await this.Html.RenderPartialAsync("SectionsPartial");
    await this.Html.RenderPartialAsync("BreadcrumbPartial", new Dictionary<string, string?>()
    {
        { "Главная", "/Index" }, { "Библитека", null }
    });
}

<div class="row w-100 mb-2">
    <h1 class="fs-2 fw-bolder mb-3">Библиотека публикаций</h1>
</div>

<div class="row w-100 mb-5 g-lg-4">

    <div class="col-12 col-lg-4 mb-4 mb-lg-0">
        <div class="bg-white custom-bg-white p-3">

            <h2 class="fs-5 fw-bolder mb-4">Категории и жанры</h2>
            @{
                var categoryGroups = this.Model.Genres.GroupBy(item => item.Category.Name)
                    .Select(item => new { 
                        Category = item.Key, 
                        Genres = item.Select(p => p.Name).ToList(),
                    }).ToList();
            }
            @{
                async Task RenderCategoryTreeview()
                {
                    <ul class="list-group list-group-flush px-2" style="overflow-y: auto; height: 250px;">

                        @for (var index = 0; index < categoryGroups.Count; index++)
                        {
                            var item = categoryGroups.ElementAt(index);
                            <li class="list-group-item p-0 my-1" style="border-bottom: 1px solid #212529">
                                <button class="btn btn-outline-dark w-100 border-0 border-bottom-1" type="button" data-bs-toggle="collapse" 
                                    data-bs-target="@($"#collapseGenre{index}")">
                                    @item.Category
                                </button>
                                <div class="collapse" id="@($"collapseGenre{index}")">
                                    <div class="card card-body m-3 overflow-auto p-1">
                                       <ul class="list-group list-group-flush">
                                            @foreach(var prop in item.Genres) 
                                            {
                                                <li class="list-group-item">
                                                    <a class="text-decoration-none" asp-page="/LibraryPages/ListCatalog" 
                                                        asp-route-CategoryGenre="@prop">@prop</a>
                                                </li> 
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                }
            }
            <div class="d-block d-lg-none">
                <button class="btn btn-outline-dark w-100 mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#collapseCategory">
                    Отобразить список
                </button>
                <div class="collapse" id="collapseCategory">
                    @{ 
                        await RenderCategoryTreeview(); 
                    }
                </div>
            </div>

            <div class="d-none d-lg-block">
                @{
                    await RenderCategoryTreeview();
                }
            </div>

        </div>
    </div>

    <div class="col-12 col-lg-8">

        <div class="row mb-4">
            <div class="col-12">
                @{
                    var allBookParam = new CatalogComponentParameter()
                    {
                        RedirectLink = "/catalog/list",
                        Title = "Все публикации",
                        
                        Request = new GetBooksListRequest()
                        {
                            IsPublished = true,
                            SortingType = SortingType.ByDate,
                            Skip = 0,
                            Take = PageOptions.Value.MaxItemsOnPage,
                        }
                    };
                }
                @await this.Component.InvokeAsync(typeof(CatalogViewComponent), new { param = allBookParam })
            </div>
        </div>
        <div class="row mb-4">
            <div class="col-12">
                @{
                    var bestBookParam = new CatalogComponentParameter()
                    {
                        RedirectLink = "/catalog/list",
                        Title = "Топ рейтинга",
                        Request = new GetBooksListRequest()
                        {
                            IsPublished = true,
                            SortingType = SortingType.ByRating,
                            Skip = 0,
                            Take = PageOptions.Value.MaxItemsOnPage,
                        }
                    };
                }
                @await this.Component.InvokeAsync(typeof(CatalogViewComponent), new { param = bestBookParam })
            </div>
        </div>

    </div>

</div>

@section Scripts {

    <script type="text/javascript">

        $(document).ready(function () {
            $('#left-scroll-btn').on('click', function () {
                $('#container-scroll').animate({ scrollLeft: '-=200' }, 400);
            });

            $('#right-scroll-btn').click(function () {
                $('#container-scroll').animate({ scrollLeft: '+=200' }, 400);
            });
        });

    </script>

}